"""
## Pentagon numbers
Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?




Link: https://projecteuler.net/problem=44

Date solved:  
2022/07/10
"""

# TODO: refactor for speed


ANSWER = 5482660

# imports

from maths.sequences import PentagonalNumbers

# solution

P = PentagonalNumbers()


def get_pentagonal_number_n(n: int):  # TODO: refactor this func out to P
    return int(n * (3 * n - 1) / 2)


def get_first_instance():
    """returns the first instance where the difference between and some of pentagonal number
    n and a smaller pentagonal number n1 are pentagaonal numbers.
    By "first instance" it means a search as n increases by 1 each step, it is possible that
    another instance with smaller difference could be found using a larger n, which will be
    tested in the next function"""
    i = 1
    n = get_pentagonal_number_n(i)
    while True:
        for j in range(1, i):
            n1 = get_pentagonal_number_n(i - j)
            diff = n - n1
            if P._isInSetSpecified(diff):
                if P._isInSetSpecified(n + n1):
                    return diff, n, i
        i += 1
        n = get_pentagonal_number_n(i)


def verify_instance(diff, n, i):
    base = get_pentagonal_number_n(i - 1)
    # test for increasing values of n until n-base is larger than diff
    while n - base < diff:
        for j in range(1, i):
            n1 = get_pentagonal_number_n(i - j)
            new_diff = n - n1
            if P._isInSetSpecified(new_diff):
                if new_diff < diff:
                    if P._isInSetSpecified(n + n1):
                        diff = new_diff
        i += 1
        n = get_pentagonal_number_n(i)

    return diff


def solution(bypass=False):
    if bypass:
        return ANSWER

    diff, n, i = get_first_instance()
    return verify_instance(diff, n, i)


if __name__ == "__main__":
    from time import perf_counter

    t0 = perf_counter()
    sol = solution(bypass=False)
    t1 = perf_counter()
    print(f"solution = {sol} in {t1-t0: 0.4f} seconds")
    print("answer =", ANSWER)

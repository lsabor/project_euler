"""
## Distinct powers
Problem 29

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?



Link: https://projecteuler.net/problem=29

Date solved:  
2022/05/14
"""

ANSWER = 9183

# imports

from math import log
from maths.math import product

# solution

search_range = 100


def count_uniques(search_range):
    uniques = set()
    to_search = range(2, search_range + 1)
    for a, b in product(to_search, to_search):
        # is a rootable?
        # what is the largest root to check?
        max_root = int(log(a, 2))
        # reduce those roots
        root_amount = 1
        current = a
        # check largest to smallest
        r = list(range(2, max_root + 1))
        r.reverse()
        for root in r:
            remaining = current ** (1 / root)
            if remaining % 1 == 0:
                current = remaining
                root_amount *= root
        # now create our unique tuple
        new_tuple = (current, b * root_amount)
        uniques.add(new_tuple)
    return len(uniques)


def solution(bypass=False):
    if bypass:
        return ANSWER
    return count_uniques(search_range)


if __name__ == "__main__":
    from time import perf_counter

    t0 = perf_counter()
    sol = solution(bypass=False)
    t1 = perf_counter()
    print(f"solution = {sol} in {t1-t0: 0.4f} seconds")
    print("answer   =", ANSWER)
